from aiogram import types
from aiogram.types import ParseMode
from keyboards import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from users import * 
from faq import *
from states import *
from aiogram.dispatcher import FSMContext

user_db = UserDB()
faq_db = QuestionAnswerDB()


async def process_faq(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    await callback_query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    keyboard = get_questions_keyboard()

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text("<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!</b> \n–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º —á–∞—Å—Ç–æ –∑–∞–¥–∞—é—Ç. \n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å ‚Äî <i>–∑–∞–¥–∞–π—Ç–µ –µ–≥–æ</i>, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º! üòä", reply_markup=keyboard, parse_mode=ParseMode.HTML)



async def cmd_start(message: types.Message):
    user = message.from_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user_db.add_user_if_not_exists(user.id, user.first_name, user.last_name, user.username)
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_start_keyboard()
    id = message.chat.id
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {id}" , reply_markup=keyboard)





async def process_question(callback_query: types.CallbackQuery):
    question = callback_query.data[len("question_"):]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    answer = faq_db.get_answer(question)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    back_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="faq")
    keyboard = InlineKeyboardMarkup().add(back_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await callback_query.answer("–ú—ã –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        text=f"{answer}",  # –û—Ç–≤–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        parse_mode=ParseMode.HTML,  # HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
        reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    )




async def ask_own_question(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    await callback_query.message.edit_text(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ. –†–æ–¥–Ω–∏–∫ —É–≤–∏–¥–∏—Ç –µ–≥–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ! üíôüíå"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ø –Ω–∞–∂–∞–ª —Å—é–¥–∞ —Å–ª—É—á–∞–π–Ω–æ", –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–Ω–µ—Å–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ
    cancel_button = InlineKeyboardButton(text="üôà –Ø –Ω–∞–∂–∞–ª —Å—é–¥–∞ —Å–ª—É—á–∞–π–Ω–æ", callback_data="cancel_question")
    keyboard = InlineKeyboardMarkup().add(cancel_button)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(UserStates.asking_question)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞




async def cancel_question(callback_query: types.CallbackQuery, state: FSMContext):
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤
    await callback_query.message.edit_text("<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!</b> \n–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º —á–∞—Å—Ç–æ –∑–∞–¥–∞—é—Ç. \n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å ‚Äî <i>–∑–∞–¥–∞–π—Ç–µ –µ–≥–æ</i>, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º! üòä", reply_markup=get_questions_keyboard(), parse_mode=ParseMode.HTML)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ



async def handle_question(message: types.Message, state: FSMContext):
    if await state.get_state() == UserStates.asking_question.state:
        user = message.from_user

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.forward(chat_id=1012078689)  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await message.bot.send_message(
            chat_id=1012078689,
            text=f"–í–û–ü–†–û–°!!!!\n\n–û—Ç: {user.first_name} {user.last_name} @{user.username}, <code>!send !{user.id}!</code>",
            parse_mode=ParseMode.HTML  # –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ç–µ–≥–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. üíôüíå", reply_markup=get_start_keyboard())

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()



async def process_back_to_main(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_start_keyboard()

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.answer()
    await callback_query.message.edit_text("–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=keyboard)


async def process_offer(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª. –ú—ã —É—á—Ç–µ–º –≤—Å–µ –≤–∞—à–∏ –∏–¥–µ–∏! üí°"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ø –Ω–∞–∂–∞–ª —Å—é–¥–∞ —Å–ª—É—á–∞–π–Ω–æ", –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–Ω–µ—Å–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ
    back_button = InlineKeyboardButton(text="üôà –Ø –Ω–∞–∂–∞–ª —Å—é–¥–∞ —Å–ª—É—á–∞–π–Ω–æ", callback_data="offer_error")
    keyboard = InlineKeyboardMarkup().add(back_button)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)

    # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    await state.set_state(UserStates.offer_post)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

async def handle_offer(message: types.Message, state: FSMContext):
    if await state.get_state() == UserStates.offer_post.state:
        user = message.from_user

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.forward(chat_id=1012078689)  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await message.bot.send_message(
            chat_id=1012078689,
            text=f"–ü–†–ï–î–õ–û–ñ–ö–ê!!! \n\n–û—Ç: {user.first_name} {user.last_name} @{user.username}, <code>!send !{user.id}!</code>",
            parse_mode=ParseMode.HTML  # –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ç–µ–≥–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–í–∞—à–∞ –∏–¥–µ—è –ø–æ–ª—É—á–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–Ω–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ!üíô", reply_markup=get_start_keyboard())

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()

async def process_cancel_offer(callback_query: types.CallbackQuery, state: FSMContext):
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_query.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_start_keyboard())
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


async def process_social(callback_query: types.CallbackQuery):
    # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await callback_query.answer()  # –û—Ç–∫–ª–∏–∫–∞–µ–º—Å—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    await callback_query.message.edit_text(
        "–í–æ—Ç –Ω–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ —Å–∞–π—Ç. \n–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏!",
        reply_markup=get_social_networks_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ—Ü. —Å–µ—Ç—è–º–∏
    )

async def process_parents(callback_query: types.CallbackQuery):
    # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await callback_query.answer()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–ª—É—à–∫–æ–π
    await callback_query.message.edit_text(
        "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤. –ú—ã —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π! üôè",
        reply_markup=get_parents_placeholder_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    )


def register_user_handlers(dp):
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_callback_query_handler(process_question, lambda c: c.data and c.data.startswith('question_'))
    dp.register_callback_query_handler(process_faq, lambda c: c.data == "faq")
    dp.register_callback_query_handler(process_back_to_main, lambda c: c.data == "back_to_main")
    dp.register_callback_query_handler(cancel_question, lambda c: c.data == "cancel_question", state=UserStates.asking_question)
    dp.register_message_handler(handle_question, content_types=["any"], state=UserStates.asking_question)
    dp.register_callback_query_handler(ask_own_question, lambda c: c.data == "ask_own_question")
    dp.register_message_handler(handle_offer, content_types=["any"], state=UserStates.offer_post)
    dp.register_callback_query_handler(process_cancel_offer, lambda c: c.data == "offer_error", state=UserStates.offer_post)
    dp.register_callback_query_handler(process_offer, lambda c: c.data == "offer")
    dp.register_callback_query_handler(process_social, lambda c: c.data == "social")
    dp.register_callback_query_handler(process_parents, lambda c: c.data == "parrents")
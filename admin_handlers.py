import asyncio
import datetime

from aiogram import types
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from users import *
from faq import *
from config import *
from aiogram import Dispatcher
from aiogram import Bot

user_db = UserDB()
faq_db = QuestionAnswerDB()

bot = Bot(token=API_TOKEN)


async def cmd_send_message(message: types.Message):
    if message.from_user.id == 1012078689:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª—É '|'
        msg_parts = message.text.split("|")
        print(msg_parts)
        if len(msg_parts) < 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: |send |id| —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        target = msg_parts[2].strip()  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ 'all'
        text_message = msg_parts[3].strip()  # –°–æ–æ–±—â–µ–Ω–∏–µ

        if target == "all":  # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
            data = user_db.get_id()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id in data:
                try:
                    await bot.send_message(chat_id=user_id[0], text=f"<b>–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n{text_message}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, <b>–í–û–ü–û –†–æ–¥–Ω–∏–∫</b>ü´Çüíô", parse_mode=ParseMode.HTML)
                    await asyncio.sleep(1)
                except Exception as e:
                    continue
            await bot.send_message(message.from_user.id, text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        else:
            if user_db.get_user(target):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
                await bot.send_message(message.from_user.id, text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}.")
                await bot.send_message(chat_id=target, text=f"<b>–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n{text_message}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, <b>–í–û–ü–û</b> <b>–†–æ–¥–Ω–∏–∫</b>ü´Çüíô", parse_mode=ParseMode.HTML)
            else:
                await bot.send_message(message.from_user.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await bot.send_message(message.from_user.id, text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")


from aiogram import types
from aiogram.types import ParseMode

async def cmd_view_questions(message: types.Message):
    if message.from_user.id == 1012078689:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        questions = faq_db.get_all_questions()
        if questions:
            questions_text = "\n".join([f"ID: {q[0]} - –í–æ–ø—Ä–æ—Å: {q[1]}" for q in questions])
            await message.answer(f"–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n{questions_text}", parse_mode=ParseMode.HTML)
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ.")

async def cmd_delete_question(message: types.Message):
    if message.from_user.id == 1012078689:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        try:
            question_id = int(message.text.split(" ")[1])
            faq_db.delete_question(question_id)
            await message.answer(f"–í–æ–ø—Ä–æ—Å —Å ID {question_id} —É–¥–∞–ª–µ–Ω.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

async def cmd_update_question(message: types.Message):
    if message.from_user.id == 1012078689:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        try:
            parts = message.text.split("|")
            print(parts)
            question_id = int(parts[2])
            new_question = parts[4]
            new_answer = parts[5].lstrip()
            faq_db.update_question_answer(question_id, new_question, new_answer)
            await message.answer(f"–í–æ–ø—Ä–æ—Å —Å ID {question_id} –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: |update_question |ID| |–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å| –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç")


async def cmd_add_question(message: types.Message):
    if message.from_user.id == 1012078689:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        try:
            parts = message.text.split("|")  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ '|'
            if len(parts) < 4:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: |add_question |–í–æ–ø—Ä–æ—Å| –û—Ç–≤–µ—Ç")
                return

            new_question = parts[2].strip()  # –í–æ–ø—Ä–æ—Å
            new_answer = parts[3].strip()  # –û—Ç–≤–µ—Ç

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            faq_db.add_question_answer(new_question, new_answer)
            await message.answer(f"–í–æ–ø—Ä–æ—Å '{new_question}' —Å –æ—Ç–≤–µ—Ç–æ–º '{new_answer}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤.")


async def send_birthday_messages(bot: Bot, user_db: UserDB):
    today = datetime.date.today().strftime('%d.%m')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM
    users = user_db.get_all_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏

    for user in users:
        try:
            user_id, first_name, last_name, username, birthdate, _ = user  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            if birthdate and birthdate != "NULL":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ NULL
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
                if birthdate == today:
                    message = f"""
–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ –º–µ–Ω—è –Ω–µ –æ–±–º–∞–Ω—É–ª Telegram, —Ç–æ —É –∫–æ–µ-–∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ\n
–í –ê—Ñ—Ä–∏–∫–µ —Å–ª–æ–Ω–∏–∫–∏ –∂–∏–≤—É—Ç, –æ–Ω–∏ –¥–æ –Ω–µ–±–∞ –¥–æ—Å—Ç–∞—é—Ç –∏ –ø–æ–¥–Ω–∏–º–∞—é—Ç —Ö–≤–æ—Å—Ç–∏–∫–∏! üêò
\n–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, <b>{first_name}!</b> üéÇ
–ñ–µ–ª–∞–µ–º —Ç–µ–±–µ –º–æ—Ä–µ —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è, —É–¥–∞—á–∏ –∏ —è—Ä–∫–∏—Ö —ç–º–æ—Ü–∏–π! –ü—É—Å—Ç—å —Å–±—É–¥—É—Ç—Å—è –≤—Å–µ –º–µ—á—Ç—ã, –∞ –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –ª—É—á—à–µ–µ! üéÅ
–° –ª—é–±–æ–≤—å—é –∏ –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏, <b>–†–æ–¥–Ω–∏–∫</b>! ü´Çüíô
                        """
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è
                    await bot.send_message(user_id, message, parse_mode=ParseMode.HTML)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")

async def bd(message: types.Message):
    if message.from_user.id == 1012078689:
        f = open("users.db", "rb")
        await message.reply_document(f)
        ss = open("questions_answers.db", "rb")
        await message.reply_document(ss)



async def norm_dr(message: types.Message):
    print("–ú–´ –í–ù–£–¢–†–ò!")
    if message.from_user.id == 1012078689:
        try:
            parts = message.text.split("|")  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ '|'
            print(parts)
            if len(parts) < 4:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: |–¥—Ä |id| data")
                return
            user_id = parts[2]
            data = parts[3].strip()
            user_db.set_dr(user_id, data)
        except Exception as e:
                print(f"—è —Ö—É–π –∑–Ω–∞–µ—Ç —á—Ç–æ –ª–µ–≥–ª–æ, –ª–∞–¥–Ω–æ –Ω–∞–µ–±–∞–ª - –≤–æ—Ç {e}")



def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_send_message, commands=['send'], commands_prefix='|')
    dp.register_message_handler(cmd_view_questions, commands=['view_questions'])
    dp.register_message_handler(cmd_delete_question, commands=['delete_question'])
    dp.register_message_handler(cmd_update_question, commands=['update_question'], commands_prefix='|')
    dp.register_message_handler(cmd_add_question, commands=['add_question'], commands_prefix='|')
    dp.register_message_handler(bd, commands=['–∫–∏–Ω—å–ë–î'], commands_prefix='/')
    dp.register_message_handler(norm_dr, commands=['date'], commands_prefix='|')

